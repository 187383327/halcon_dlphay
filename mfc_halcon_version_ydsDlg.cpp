
// mfc_halcon_version_ydsDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "mfc_halcon_version_yds.h"
#include "mfc_halcon_version_ydsDlg.h"
#include "afxdialogex.h"
#include "HALCON_FUNC_YDS.H"


//halcon的头文件
#include "halconcpp.h"
#define RATIO_PIXAL_TO_UM   7.8154


#ifdef _DEBUG
#define new DEBUG_NEW
#endif

//给预编译器
using namespace HalconCpp;

HALCON_FUNC_YDS HALCON_FUNC_ACTION;

	void Init_value_and_camera()
	{
		//********************************************************************************************************
		//***********************************机器视觉***********************************************************
		//*********************************************************************************************************

		//***********************************变量初始化*********************************************************************
		//Camera
		HALCON_FUNC_ACTION.hv_AcqHandle_of_camera = 0;

		//*WINDOW
		HALCON_FUNC_ACTION.hv_Width_of_window = 0;
		HALCON_FUNC_ACTION.hv_Height_of_window = 0;

		HALCON_FUNC_ACTION.hv_PATH_OF_PICTURE1 = "C:/Users/Administrator/Desktop/HALCON工程/TESTING1.bmp";
		HALCON_FUNC_ACTION.hv_PATH_OF_PICTURE2 = "C:/Users/Administrator/Desktop/HALCON工程/OCR_TRAIN_FILE/NCC_MODEL/ncc_model_demo_01.bmp";
		HALCON_FUNC_ACTION.hv_PATH_OF_PICTURE3 = "C:/Users/Administrator/Desktop/HALCON工程/TES7TING3.bmp";
		HALCON_FUNC_ACTION.hv_PATH_OF_PICTURE5 = "C:/Users/Administrator/Desktop/HALCON工程/OCR_TRAIN_FILE/NCC_MODEL/ncc_model_demo_02.bmp";
		

		//**标志位*****程序是否正常运行*****
		HALCON_FUNC_ACTION.hv_FLAG_ING_ADJUST_YES_OR_NO_YDS       = 0;
		HALCON_FUNC_ACTION.hv_FLAG_ING_RECOGNIYION_YES_OR_NO_YDS  = 0;

		//***********************************相机的初始化*********************************************************************

		//Image Acquisition 01: Code generated by Image Acquisition 01
		OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "gray", -1, "false",
			"default", "[0]  Camera MV-U130M#3DF11190-3", 0, -1, &HALCON_FUNC_ACTION.hv_AcqHandle_of_camera);
		GrabImageStart(HALCON_FUNC_ACTION.hv_AcqHandle_of_camera, -1);


	}




// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// Cmfc_halcon_version_ydsDlg 对话框



Cmfc_halcon_version_ydsDlg::Cmfc_halcon_version_ydsDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(IDD_MFC_HALCON_VERSION_YDS_DIALOG, pParent)
	, Result_of_recognition(_T(""))
	, Result_pin_02_width(_T(""))
	, Result_pin01_width(_T(""))
	, Result_pin_03_width(_T(""))
	, Result_pin_04_width(_T(""))
	, Result_pin_05_width(_T(""))
	, Result_pin_06_width(_T(""))
	, Result_pin_07_width(_T(""))
	, Result_pin_08_width(_T(""))
	, Result_gap_01_width(_T(""))
	, Result_gap_02_width(_T(""))
	, Result_gap_03_width(_T(""))
	, Result_gap_04_width(_T(""))
	, Result_gap_06_width(_T(""))
	, Result_gap_05_width(_T(""))
	, Result_pin_a_width(_T(""))
	, Result_gap_a_width(_T(""))
	, m_sSnapFilePath(_T(""))
	, Result_of_ocr_recognition(_T(""))
	, Result_pin0n_width(_T(""))
	, Result_dis_01_yds_width(_T(""))
	, Result_dis_02_yds_width(_T(""))
	, Result_dis_03_yds_width(_T(""))
	, Result_dis_04_yds_width(_T(""))
	, Result_dis_05_yds_width(_T(""))
	, Result_dis_06_yds_width(_T(""))
	, Result_detection_00_00_yds(_T(""))
	, Result_detection_01_00_yds(_T(""))
	, Result_detection_02_00_yds(_T(""))
	, Result_detection_03_00_yds(_T(""))
	, Result_detection_04_00_yds(_T(""))
	, Result_detection_10_00_yds(_T(""))
	, Result_detection_11_00_yds(_T(""))
	, Result_detection_12_00_yds(_T(""))
	, Result_detection_13_00_yds(_T(""))
	, Result_detection_14_00_yds(_T(""))
	, Result_detection_15_00_yds(_T(""))
	, Result_detection_16_00_yds(_T(""))
	, Result_detection_17_00_yds(_T(""))
	, Result_detection_18_00_yds(_T(""))
	, Result_detection_19_00_yds(_T(""))
	, Result_detection_20_00_yds(_T(""))
	, Result_detection_25_00_yds(_T(""))
	, Result_detection_29_00_yds(_T(""))
	, Result_detection_21_00_yds(_T(""))
	, Result_detection_24_01_yds(_T(""))
	, Result_detection_24_02_yds(_T(""))
	, Result_detection_24_03_yds(_T(""))
	, Result_detection_24_04_yds(_T(""))
	, Result_detection_24_05_yds(_T(""))
	, Result_detection_24_06_yds(_T(""))
	, Result_detection_24_07_yds(_T(""))
	, Result_detection_24_08_yds(_T(""))
	, Result_detection_26_01_yds(_T(""))
	, Result_detection_26_02_yds(_T(""))
	, Result_detection_26_03_yds(_T(""))
	, Result_detection_26_04_yds(_T(""))
	, Result_detection_26_05_yds(_T(""))
	, Result_detection_26_06_yds(_T(""))
	, Result_detection_26_07_yds(_T(""))
	, Result_detection_26_08_yds(_T(""))
	, NCC_QUALITY_SCORE(_T(""))
	, OCV_QUALITY_SCORE_TRAIN(_T(""))
	, OCV_QUALITY_SCORE(_T(""))
	, OCV_QUALITY_SCORE_TRAIN_CAPSULE(_T(""))
	, OCV_QUALITY_SCORE_CAPSULE(_T(""))
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void Cmfc_halcon_version_ydsDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Text(pDX, IDC_EDIT3, Result_pin_02_width);
	DDX_Text(pDX, IDC_EDIT10, Result_pin01_width);
	DDX_Text(pDX, IDC_EDIT4, Result_pin_03_width);
	DDX_Text(pDX, IDC_EDIT5, Result_pin_04_width);
	DDX_Text(pDX, IDC_EDIT6, Result_pin_05_width);
	DDX_Text(pDX, IDC_EDIT7, Result_pin_06_width);
	DDX_Text(pDX, IDC_EDIT8, Result_pin_07_width);
	DDX_Text(pDX, IDC_EDIT9, Result_pin_08_width);
	DDX_Text(pDX, IDC_EDIT2, Result_gap_01_width);
	DDX_Text(pDX, IDC_EDIT11, Result_gap_02_width);
	DDX_Text(pDX, IDC_EDIT12, Result_gap_03_width);
	DDX_Text(pDX, IDC_EDIT13, Result_gap_04_width);
	DDX_Text(pDX, IDC_EDIT14, Result_gap_06_width);
	DDX_Text(pDX, IDC_EDIT15, Result_gap_05_width);
	DDX_Text(pDX, IDC_EDIT16, Result_pin_a_width);
	DDX_Text(pDX, IDC_EDIT17, Result_gap_a_width);
	DDX_Text(pDX, IDC_EDIT19, m_sSnapFilePath);
	DDX_Text(pDX, IDC_EDIT18, Result_of_ocr_recognition);
	DDX_Text(pDX, IDC_EDIT1, Result_pin0n_width);
	DDX_Text(pDX, IDC_EDIT57, Result_dis_01_yds_width);
	DDX_Text(pDX, IDC_EDIT58, Result_dis_02_yds_width);
	DDX_Text(pDX, IDC_EDIT60, Result_dis_03_yds_width);
	DDX_Text(pDX, IDC_EDIT61, Result_dis_04_yds_width);
	DDX_Text(pDX, IDC_EDIT59, Result_dis_05_yds_width);
	DDX_Text(pDX, IDC_EDIT56, Result_dis_06_yds_width);
	DDX_Text(pDX, IDC_EDIT20, Result_detection_00_00_yds);
	DDX_Text(pDX, IDC_EDIT21, Result_detection_01_00_yds);
	DDX_Text(pDX, IDC_EDIT22, Result_detection_02_00_yds);
	DDX_Text(pDX, IDC_EDIT23, Result_detection_03_00_yds);
	DDX_Text(pDX, IDC_EDIT24, Result_detection_04_00_yds);
	DDX_Text(pDX, IDC_EDIT25, Result_detection_10_00_yds);
	DDX_Text(pDX, IDC_EDIT26, Result_detection_11_00_yds);
	DDX_Text(pDX, IDC_EDIT27, Result_detection_12_00_yds);
	DDX_Text(pDX, IDC_EDIT28, Result_detection_13_00_yds);
	DDX_Text(pDX, IDC_EDIT29, Result_detection_14_00_yds);
	DDX_Text(pDX, IDC_EDIT30, Result_detection_15_00_yds);
	DDX_Text(pDX, IDC_EDIT31, Result_detection_16_00_yds);
	DDX_Text(pDX, IDC_EDIT32, Result_detection_17_00_yds);
	DDX_Text(pDX, IDC_EDIT33, Result_detection_18_00_yds);
	DDX_Text(pDX, IDC_EDIT34, Result_detection_19_00_yds);
	DDX_Text(pDX, IDC_EDIT37, Result_detection_20_00_yds);
	DDX_Text(pDX, IDC_EDIT36, Result_detection_25_00_yds);
	DDX_Text(pDX, IDC_EDIT35, Result_detection_29_00_yds);
	DDX_Text(pDX, IDC_EDIT38, Result_detection_21_00_yds);
	DDX_Text(pDX, IDC_EDIT39, Result_detection_24_01_yds);
	DDX_Text(pDX, IDC_EDIT40, Result_detection_24_02_yds);
	DDX_Text(pDX, IDC_EDIT41, Result_detection_24_03_yds);
	DDX_Text(pDX, IDC_EDIT42, Result_detection_24_04_yds);
	DDX_Text(pDX, IDC_EDIT44, Result_detection_24_05_yds);
	DDX_Text(pDX, IDC_EDIT45, Result_detection_24_06_yds);
	DDX_Text(pDX, IDC_EDIT46, Result_detection_24_07_yds);
	DDX_Text(pDX, IDC_EDIT47, Result_detection_24_08_yds);
	DDX_Text(pDX, IDC_EDIT48, Result_detection_26_01_yds);
	DDX_Text(pDX, IDC_EDIT49, Result_detection_26_02_yds);
	DDX_Text(pDX, IDC_EDIT50, Result_detection_26_03_yds);
	DDX_Text(pDX, IDC_EDIT51, Result_detection_26_04_yds);
	DDX_Text(pDX, IDC_EDIT52, Result_detection_26_05_yds);
	DDX_Text(pDX, IDC_EDIT53, Result_detection_26_06_yds);
	DDX_Text(pDX, IDC_EDIT54, Result_detection_26_07_yds);
	DDX_Text(pDX, IDC_EDIT55, Result_detection_26_08_yds);
	DDX_Text(pDX, IDC_EDIT43, NCC_QUALITY_SCORE);
	DDX_Text(pDX, IDC_EDIT62, OCV_QUALITY_SCORE_TRAIN);
	DDX_Text(pDX, IDC_EDIT63, OCV_QUALITY_SCORE);
	DDX_Text(pDX, IDC_EDIT64, OCV_QUALITY_SCORE_TRAIN_CAPSULE);
	DDX_Text(pDX, IDC_EDIT65, OCV_QUALITY_SCORE_CAPSULE);
}

BEGIN_MESSAGE_MAP(Cmfc_halcon_version_ydsDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON1, &Cmfc_halcon_version_ydsDlg::OnBnClickedButton1)
	ON_WM_TIMER()
	ON_BN_CLICKED(IDC_BUTTON2, &Cmfc_halcon_version_ydsDlg::OnBnClickedButton2)
	ON_BN_CLICKED(IDC_BUTTON3, &Cmfc_halcon_version_ydsDlg::OnBnClickedButton3)
	ON_BN_CLICKED(IDC_BUTTON5, &Cmfc_halcon_version_ydsDlg::OnBnClickedButton5)
	ON_CBN_SELCHANGE(IDC_COMBO1, &Cmfc_halcon_version_ydsDlg::OnCbnSelchangeCombo1)
	ON_BN_CLICKED(IDC_BUTTON4, &Cmfc_halcon_version_ydsDlg::OnBnClickedButton4)
	ON_EN_CHANGE(IDC_EDIT1, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit1)
	ON_EN_CHANGE(IDC_EDIT10, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit10)
	ON_EN_CHANGE(IDC_EDIT3, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit3)
	ON_EN_CHANGE(IDC_EDIT4, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit4)
	ON_EN_CHANGE(IDC_EDIT5, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit5)
	ON_EN_CHANGE(IDC_EDIT6, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit6)
	ON_EN_CHANGE(IDC_EDIT7, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit7)
	ON_EN_CHANGE(IDC_EDIT8, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit8)
	ON_EN_CHANGE(IDC_EDIT9, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit9)
	ON_EN_CHANGE(IDC_EDIT2, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit2)
	ON_EN_CHANGE(IDC_EDIT11, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit11)
	ON_EN_CHANGE(IDC_EDIT12, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit12)
	ON_EN_CHANGE(IDC_EDIT13, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit13)
	ON_EN_CHANGE(IDC_EDIT14, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit14)
	ON_EN_CHANGE(IDC_EDIT15, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit15)
	ON_EN_CHANGE(IDC_EDIT16, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit16)
	ON_EN_CHANGE(IDC_EDIT17, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit17)
	ON_EN_CHANGE(IDC_EDIT18, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit18)
	ON_BN_CLICKED(IDC_BUTTON6, &Cmfc_halcon_version_ydsDlg::OnBnClickedButton6)
	ON_EN_CHANGE(IDC_EDIT19, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit19)
	ON_BN_CLICKED(IDC_BUTTON7, &Cmfc_halcon_version_ydsDlg::OnBnClickedButton7)
	ON_STN_CLICKED(IDC_STATIC_PREVIEW, &Cmfc_halcon_version_ydsDlg::OnStnClickedStaticPreview)
	ON_EN_CHANGE(IDC_EDIT57, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit57)
	ON_EN_CHANGE(IDC_EDIT61, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit61)
	ON_EN_CHANGE(IDC_EDIT58, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit58)
	ON_EN_CHANGE(IDC_EDIT59, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit59)
	ON_EN_CHANGE(IDC_EDIT60, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit60)
	ON_EN_CHANGE(IDC_EDIT56, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit56)
	ON_EN_CHANGE(IDC_EDIT20, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit20)
	ON_EN_CHANGE(IDC_EDIT21, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit21)
	ON_EN_CHANGE(IDC_EDIT22, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit22)
	ON_EN_CHANGE(IDC_EDIT23, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit23)
	ON_EN_CHANGE(IDC_EDIT24, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit24)
	ON_EN_CHANGE(IDC_EDIT25, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit25)
	ON_EN_CHANGE(IDC_EDIT26, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit26)
	ON_EN_CHANGE(IDC_EDIT27, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit27)
	ON_EN_CHANGE(IDC_EDIT28, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit28)
	ON_EN_CHANGE(IDC_EDIT29, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit29)
	ON_EN_CHANGE(IDC_EDIT30, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit30)
	ON_EN_CHANGE(IDC_EDIT31, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit31)
	ON_EN_CHANGE(IDC_EDIT32, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit32)
	ON_EN_CHANGE(IDC_EDIT33, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit33)
	ON_EN_CHANGE(IDC_EDIT34, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit34)
	ON_EN_CHANGE(IDC_EDIT37, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit37)
	ON_EN_CHANGE(IDC_EDIT39, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit39)
	ON_EN_CHANGE(IDC_EDIT40, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit40)
	ON_EN_CHANGE(IDC_EDIT41, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit41)
	ON_EN_CHANGE(IDC_EDIT42, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit42)
	ON_EN_CHANGE(IDC_EDIT44, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit44)
	ON_EN_CHANGE(IDC_EDIT45, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit45)
	ON_EN_CHANGE(IDC_EDIT46, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit46)
	ON_EN_CHANGE(IDC_EDIT47, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit47)
	ON_EN_CHANGE(IDC_EDIT48, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit48)
	ON_EN_CHANGE(IDC_EDIT49, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit49)
	ON_EN_CHANGE(IDC_EDIT50, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit50)
	ON_EN_CHANGE(IDC_EDIT51, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit51)
	ON_EN_CHANGE(IDC_EDIT52, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit52)
	ON_EN_CHANGE(IDC_EDIT53, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit53)
	ON_EN_CHANGE(IDC_EDIT54, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit54)
	ON_EN_CHANGE(IDC_EDIT55, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit55)
	ON_EN_CHANGE(IDC_EDIT36, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit36)
	ON_EN_CHANGE(IDC_EDIT35, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit35)
	ON_EN_CHANGE(IDC_EDIT38, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit38)
	ON_EN_CHANGE(IDC_EDIT43, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit43)
	ON_EN_CHANGE(IDC_EDIT62, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit62)
	ON_EN_CHANGE(IDC_EDIT63, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit63)
	ON_EN_CHANGE(IDC_EDIT64, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit64)
	ON_EN_CHANGE(IDC_EDIT65, &Cmfc_halcon_version_ydsDlg::OnEnChangeEdit65)
END_MESSAGE_MAP()


// Cmfc_halcon_version_ydsDlg 消息处理程序

BOOL Cmfc_halcon_version_ydsDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	//ShowWindow(SW_MINIMIZE);

	// TODO: 在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void Cmfc_halcon_version_ydsDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void Cmfc_halcon_version_ydsDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}


//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR Cmfc_halcon_version_ydsDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}


//初始化
void Cmfc_halcon_version_ydsDlg::OnBnClickedButton1()
{
	


}

//定时器
void Cmfc_halcon_version_ydsDlg::OnTimer(UINT_PTR nIDEvent)
{
	//*******************************相机SNAP 相关性匹配（NCC）************************************************************************

	HALCON_FUNC_ACTION.ACTION_NCC_MODEL();
	//HALCON_FUNC_ACTION.ACTION_TRAIN_OCV_VARMODEL();
	//清楚识别显示
	Result_of_ocr_recognition = "";
	UpdateData(FALSE);
	//******如果目标不在视野中的情况**************************
	while (0 != (HALCON_FUNC_ACTION.hv_Row == HTuple()))
	{
		HALCON_FUNC_ACTION.ACTION_FIND_OBJECT_YES_OR_NO();
	}
	//**点和角严格计算的仿射变换
	HALCON_FUNC_ACTION.ACTION_CONFIRM_OBJECT();
	//******************************字符和LOGO变量定义************************************************
	HALCON_FUNC_ACTION.INIT_LOCATION_CHAR_AND_LOGO();
	//*******************************变量坐标的定义**************************************************************************
	HALCON_FUNC_ACTION.INIT_LOCATION_PIN(); 
	//********************************字体设置*************************************************************************
	HALCON_FUNC_ACTION.INIT_FONT_PIN();
	//********************************引脚相关测量*************************************************************************
	HALCON_FUNC_ACTION.ACTION_MEASURE_PIN();
	//*************做一个数据的备份，防止在移动物体时，出现数据测量的不准确，导致程序出现BUG**********************
	//*************如果数组中的元素个数不满足的要求的话，将会用以前备份的数据进行初始化***************************
	HALCON_FUNC_ACTION.ACTION_BACKUP_DATA_PIN();

	
	//********************************检测结果的相关计算*************************************************************************
	HALCON_FUNC_ACTION.ACTION_CALCULATE_RESULT_OF_PIN();
	//********************************显示检测结果*************************************************************************

	if (0 != (HALCON_FUNC_ACTION.hv_FLAG_ING_ADJUST_YES_OR_NO_YDS == 0))
	{
		HALCON_FUNC_ACTION.DISPLAY_RESULT_OF_ALL();
		Result_dis_01_yds_width = HALCON_FUNC_ACTION.strBuffer_Result_dis_01_yds_width;
		Result_dis_02_yds_width = HALCON_FUNC_ACTION.strBuffer_Result_dis_02_yds_width;
		Result_dis_03_yds_width = HALCON_FUNC_ACTION.strBuffer_Result_dis_03_yds_width;
		Result_dis_04_yds_width = HALCON_FUNC_ACTION.strBuffer_Result_dis_04_yds_width;
		Result_dis_05_yds_width = HALCON_FUNC_ACTION.strBuffer_Result_dis_05_yds_width;
		Result_dis_06_yds_width = HALCON_FUNC_ACTION.strBuffer_Result_dis_06_yds_width;
		Result_pin0n_width = HALCON_FUNC_ACTION.strBuffer_trans_hv_numPins;
		Result_pin01_width = HALCON_FUNC_ACTION.strBuffer_trans_hv_PinWidth01;
		Result_pin_02_width = HALCON_FUNC_ACTION.strBuffer_trans_hv_PinWidth02;
		Result_pin_03_width = HALCON_FUNC_ACTION.strBuffer_trans_hv_PinWidth03;
		Result_pin_04_width = HALCON_FUNC_ACTION.strBuffer_trans_hv_PinWidth04;
	    Result_pin_05_width = HALCON_FUNC_ACTION.strBuffer_trans_hv_PinWidth05;
		Result_pin_06_width = HALCON_FUNC_ACTION.strBuffer_trans_hv_PinWidth06;
		Result_pin_07_width = HALCON_FUNC_ACTION.strBuffer_trans_hv_PinWidth07;
		Result_pin_08_width = HALCON_FUNC_ACTION.strBuffer_trans_hv_PinWidth08;
		Result_gap_01_width = HALCON_FUNC_ACTION.strBuffer_trans_hv_gapWidth01;
		Result_gap_02_width = HALCON_FUNC_ACTION.strBuffer_trans_hv_gapWidth02;
		Result_gap_03_width = HALCON_FUNC_ACTION.strBuffer_trans_hv_gapWidth03;
		Result_gap_04_width = HALCON_FUNC_ACTION.strBuffer_trans_hv_gapWidth04;
		Result_gap_05_width = HALCON_FUNC_ACTION.strBuffer_trans_hv_gapWidth05;
		Result_gap_06_width = HALCON_FUNC_ACTION.strBuffer_trans_hv_gapWidth06;
		Result_gap_a_width = HALCON_FUNC_ACTION.strBuffer_trans_hv_gapWidth0a;
		Result_pin_a_width = HALCON_FUNC_ACTION.strBuffer_trans_hv_PinWidth0a;

		/*
		HALCON_FUNC_ACTION.ACTION_DETECTION_ALL_OF_FLAW();
		//全部显示的更新：
		{
			if (HALCON_FUNC_ACTION.Result_detection_00_00_YDS == FALSE)
			{
				Result_detection_00_00_yds = "合格";
			}
			else
			{
				Result_detection_00_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_01_00_YDS == FALSE)
			{
				Result_detection_01_00_yds = "合格";
			}
			else
			{
				Result_detection_01_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_02_00_YDS == FALSE)
			{
				Result_detection_02_00_yds = "合格";
			}
			else
			{
				Result_detection_02_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_03_00_YDS == FALSE)
			{
				Result_detection_03_00_yds = "合格";
			}
			else
			{
				Result_detection_03_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_04_00_YDS == FALSE)
			{
				Result_detection_04_00_yds = "合格";
			}
			else
			{
				Result_detection_04_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_10_00_YDS == FALSE)
			{
				Result_detection_10_00_yds = "合格";
			}
			else
			{
				Result_detection_10_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_11_00_YDS == FALSE)
			{
				Result_detection_11_00_yds = "合格";
			}
			else
			{
				Result_detection_11_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_12_00_YDS == FALSE)
			{
				Result_detection_12_00_yds = "合格";
			}
			else
			{
				Result_detection_12_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_13_00_YDS == FALSE)
			{
				Result_detection_13_00_yds = "合格";
			}
			else
			{
				Result_detection_13_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_14_00_YDS == FALSE)
			{
				Result_detection_14_00_yds = "合格";
			}
			else
			{
				Result_detection_14_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_15_00_YDS == FALSE)
			{
				Result_detection_15_00_yds = "合格";
			}
			else
			{
				Result_detection_15_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_16_00_YDS == FALSE)
			{
				Result_detection_16_00_yds = "合格";
			}
			else
			{
				Result_detection_16_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_17_00_YDS == FALSE)
			{
				Result_detection_17_00_yds = "合格";
			}
			else
			{
				Result_detection_17_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_18_00_YDS == FALSE)
			{
				Result_detection_18_00_yds = "合格";
			}
			else
			{
				Result_detection_18_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_19_00_YDS == FALSE)
			{
				Result_detection_19_00_yds = "合格";
			}
			else
			{
				Result_detection_19_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_20_00_YDS == FALSE)
			{
				Result_detection_20_00_yds = "合格";
			}
			else
			{
				Result_detection_20_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_21_00_YDS == FALSE)
			{
				Result_detection_21_00_yds = "合格";
			}
			else
			{
				Result_detection_21_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_25_00_YDS == FALSE)
			{
				Result_detection_25_00_yds = "合格";
			}
			else
			{
				Result_detection_25_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_29_00_YDS == FALSE)
			{
				Result_detection_29_00_yds = "合格";
			}
			else
			{
				Result_detection_29_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_24_01_YDS == FALSE)
			{
				Result_detection_24_01_yds = "合格";
			}
			else
			{
				Result_detection_24_01_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_24_02_YDS == FALSE)
			{
				Result_detection_24_02_yds = "合格";
			}
			else
			{
				Result_detection_24_02_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_24_03_YDS == FALSE)
			{
				Result_detection_24_03_yds = "合格";
			}
			else
			{
				Result_detection_24_03_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_24_04_YDS == FALSE)
			{
				Result_detection_24_04_yds = "合格";
			}
			else
			{
				Result_detection_24_04_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_24_05_YDS == FALSE)
			{
				Result_detection_24_05_yds = "合格";
			}
			else
			{
				Result_detection_24_05_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_24_06_YDS == FALSE)
			{
				Result_detection_24_06_yds = "合格";
			}
			else
			{
				Result_detection_24_06_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_24_07_YDS == FALSE)
			{
				Result_detection_24_07_yds = "合格";
			}
			else
			{
				Result_detection_24_07_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_24_08_YDS == FALSE)
			{
				Result_detection_24_08_yds = "合格";
			}
			else
			{
				Result_detection_24_08_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_26_01_YDS == FALSE)
			{
				Result_detection_26_01_yds = "合格";
			}
			else
			{
				Result_detection_26_01_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_26_02_YDS == FALSE)
			{
				Result_detection_26_02_yds = "合格";
			}
			else
			{
				Result_detection_26_02_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_26_03_YDS == FALSE)
			{
				Result_detection_26_03_yds = "合格";
			}
			else
			{
				Result_detection_26_03_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_26_04_YDS == FALSE)
			{
				Result_detection_26_04_yds = "合格";
			}
			else
			{
				Result_detection_26_04_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_26_05_YDS == FALSE)
			{
				Result_detection_26_05_yds = "合格";
			}
			else
			{
				Result_detection_26_05_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_26_06_YDS == FALSE)
			{
				Result_detection_26_06_yds = "合格";
			}
			else
			{
				Result_detection_26_06_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_26_07_YDS == FALSE)
			{
				Result_detection_26_07_yds = "合格";
			}
			else
			{
				Result_detection_26_07_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_26_08_YDS == FALSE)
			{
				Result_detection_26_08_yds = "合格";
			}
			else
			{
				Result_detection_26_08_yds = "不合格";
			}

		}
		/*
		Result_detection_00_00_yds = "合格";
		Result_detection_01_00_yds = "合格";
		Result_detection_02_00_yds = "合格";
		Result_detection_03_00_yds = "合格";
		Result_detection_04_00_yds = "合格";
		Result_detection_10_00_yds = "合格";
		Result_detection_11_00_yds = "合格";
		Result_detection_12_00_yds = "合格";
		Result_detection_13_00_yds = "合格";
		Result_detection_14_00_yds = "合格";
		Result_detection_15_00_yds = "合格";
		Result_detection_16_00_yds = "合格";
		Result_detection_17_00_yds = "合格";
		Result_detection_18_00_yds = "合格";
		Result_detection_19_00_yds = "合格";
		Result_detection_20_00_yds = "合格";
		Result_detection_21_00_yds = "合格";
		Result_detection_25_00_yds = "合格";
		Result_detection_29_00_yds = "合格";
		Result_detection_24_01_yds = "合格";
		Result_detection_24_02_yds = "合格";
		Result_detection_24_03_yds = "合格";
		Result_detection_24_04_yds = "合格";
		Result_detection_24_05_yds = "合格";
		Result_detection_24_06_yds = "合格";
		Result_detection_24_07_yds = "合格";
		Result_detection_24_08_yds = "合格";
		Result_detection_26_01_yds = "合格";
		Result_detection_26_02_yds = "合格";
		Result_detection_26_03_yds = "合格";
		Result_detection_26_04_yds = "合格";
		Result_detection_26_05_yds = "合格";
		Result_detection_26_06_yds = "合格";
		Result_detection_26_07_yds = "合格";
		Result_detection_26_08_yds = "合格";
		*/
		UpdateData(FALSE);
	}
	else
	{
		//数据没有检测到的情况
		Result_pin0n_width         = "暂无数据";
		Result_pin01_width         = "暂无数据";
		Result_pin_02_width        = "暂无数据";
		Result_pin_03_width        = "暂无数据";
		Result_pin_04_width        = "暂无数据";
		Result_pin_05_width        = "暂无数据";
		Result_pin_06_width        = "暂无数据";
		Result_pin_07_width        = "暂无数据";
		Result_pin_08_width        = "暂无数据";

		Result_gap_01_width        = "暂无数据";
		Result_gap_02_width        = "暂无数据";
		Result_gap_03_width        = "暂无数据";
		Result_gap_04_width        = "暂无数据";
		Result_gap_05_width        = "暂无数据";
		Result_gap_06_width        = "暂无数据";
		Result_pin_a_width         = "暂无数据";
		Result_gap_a_width         = "暂无数据";

		Result_dis_01_yds_width    = "暂无数据";
		Result_dis_02_yds_width    = "暂无数据";
		Result_dis_03_yds_width    = "暂无数据";
		Result_dis_04_yds_width    = "暂无数据";
		Result_dis_05_yds_width    = "暂无数据";
		Result_dis_06_yds_width    = "暂无数据";
		
		Result_detection_00_00_yds = "暂无数据";
		Result_detection_01_00_yds = "暂无数据";
		Result_detection_02_00_yds = "暂无数据";
		Result_detection_03_00_yds = "暂无数据";
		Result_detection_04_00_yds = "暂无数据";
		Result_detection_10_00_yds = "暂无数据";
		Result_detection_11_00_yds = "暂无数据";
		Result_detection_12_00_yds = "暂无数据";
		Result_detection_13_00_yds = "暂无数据";
		Result_detection_14_00_yds = "暂无数据";
		Result_detection_15_00_yds = "暂无数据";
		Result_detection_16_00_yds = "暂无数据";
		Result_detection_17_00_yds = "暂无数据";
		Result_detection_18_00_yds = "暂无数据";
		Result_detection_19_00_yds = "暂无数据";
		Result_detection_20_00_yds = "暂无数据";
		Result_detection_21_00_yds = "暂无数据";
		Result_detection_25_00_yds = "暂无数据";
		Result_detection_29_00_yds = "暂无数据";
		Result_detection_24_01_yds = "暂无数据";
		Result_detection_24_02_yds = "暂无数据";
		Result_detection_24_03_yds = "暂无数据";
		Result_detection_24_04_yds = "暂无数据";
		Result_detection_24_05_yds = "暂无数据";
		Result_detection_24_06_yds = "暂无数据";
		Result_detection_24_07_yds = "暂无数据";
		Result_detection_24_08_yds = "暂无数据";
		Result_detection_26_01_yds = "暂无数据";
		Result_detection_26_02_yds = "暂无数据";
		Result_detection_26_03_yds = "暂无数据";
		Result_detection_26_04_yds = "暂无数据";
		Result_detection_26_05_yds = "暂无数据";
		Result_detection_26_06_yds = "暂无数据";
		Result_detection_26_07_yds = "暂无数据";
		Result_detection_26_08_yds = "暂无数据";
		Result_of_ocr_recognition  = "暂无数据";
		UpdateData(FALSE);
	}

	HALCON_FUNC_ACTION.CLOSE_MEASURE_PIN();
	
	if (0 != (HALCON_FUNC_ACTION.hv_FLAG_ING_ADJUST_YES_OR_NO_YDS == 0))
	{
		//预处理
		HALCON_FUNC_ACTION.GET_CROP_IMAGE_ACTION();

		HALCON_FUNC_ACTION.INIT_TRAIN_OCV_ACTION();
		HALCON_FUNC_ACTION.ACTION_TRAIN_OCV_VARMODEL();
		HALCON_FUNC_ACTION.ACTION_OCV_CORE();
		HALCON_FUNC_ACTION.CLEAR_OCV_MODELDATA();

		//HALCON_FUNC_ACTION.INIT_TRAIN_OCV_ACTION_CAPSULE();
		//HALCON_FUNC_ACTION.ACTION_TRAIN_OCV_VARMODEL_CAPSULE();
		//HALCON_FUNC_ACTION.ACTION_OCV_CORE_CAPSULE();
		//HALCON_FUNC_ACTION.CLEAR_OCV_MODELDATA_CAPSULE();

		NCC_QUALITY_SCORE = HALCON_FUNC_ACTION.strBuffer_NCC_QUALITY_SCORE;
		OCV_QUALITY_SCORE_TRAIN = HALCON_FUNC_ACTION.strBuffer_OCV_QUALITY_SCORE_TRAIN;
		OCV_QUALITY_SCORE = HALCON_FUNC_ACTION.strBuffer_OCV_QUALITY_SCORE;
		//OCV_QUALITY_SCORE_TRAIN_CAPSULE = HALCON_FUNC_ACTION.strBuffer_OCV_QUALITY_SCORE_TRAIN_CAPSULE;
		//OCV_QUALITY_SCORE_CAPSULE = HALCON_FUNC_ACTION.strBuffer_OCV_QUALITY_SCORE_CAPSULE;
		OCV_QUALITY_SCORE_TRAIN_CAPSULE = "0.000";
		OCV_QUALITY_SCORE_CAPSULE = "0.000";
		UpdateData(FALSE);

		HALCON_FUNC_ACTION.ACTION_DETECTION_ALL_OF_FLAW();
		//全部显示的更新：
		{
			if (HALCON_FUNC_ACTION.Result_detection_00_00_YDS == FALSE)
			{
				Result_detection_00_00_yds = "合格";
			}
			else
			{
				Result_detection_00_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_01_00_YDS == FALSE)
			{
				Result_detection_01_00_yds = "合格";
			}
			else
			{
				Result_detection_01_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_02_00_YDS == FALSE)
			{
				Result_detection_02_00_yds = "合格";
			}
			else
			{
				Result_detection_02_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_03_00_YDS == FALSE)
			{
				Result_detection_03_00_yds = "合格";
			}
			else
			{
				Result_detection_03_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_04_00_YDS == FALSE)
			{
				Result_detection_04_00_yds = "合格";
			}
			else
			{
				Result_detection_04_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_10_00_YDS == FALSE)
			{
				Result_detection_10_00_yds = "合格";
			}
			else
			{
				Result_detection_10_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_11_00_YDS == FALSE)
			{
				Result_detection_11_00_yds = "合格";
			}
			else
			{
				Result_detection_11_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_12_00_YDS == FALSE)
			{
				Result_detection_12_00_yds = "合格";
			}
			else
			{
				Result_detection_12_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_13_00_YDS == FALSE)
			{
				Result_detection_13_00_yds = "合格";
			}
			else
			{
				Result_detection_13_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_14_00_YDS == FALSE)
			{
				Result_detection_14_00_yds = "合格";
			}
			else
			{
				Result_detection_14_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_15_00_YDS == FALSE)
			{
				Result_detection_15_00_yds = "合格";
			}
			else
			{
				Result_detection_15_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_16_00_YDS == FALSE)
			{
				Result_detection_16_00_yds = "合格";
			}
			else
			{
				Result_detection_16_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_17_00_YDS == FALSE)
			{
				Result_detection_17_00_yds = "合格";
			}
			else
			{
				Result_detection_17_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_18_00_YDS == FALSE)
			{
				Result_detection_18_00_yds = "合格";
			}
			else
			{
				Result_detection_18_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_19_00_YDS == FALSE)
			{
				Result_detection_19_00_yds = "合格";
			}
			else
			{
				Result_detection_19_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_20_00_YDS == FALSE)
			{
				Result_detection_20_00_yds = "合格";
			}
			else
			{
				Result_detection_20_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_21_00_YDS == FALSE)
			{
				Result_detection_21_00_yds = "合格";
			}
			else
			{
				Result_detection_21_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_25_00_YDS == FALSE)
			{
				Result_detection_25_00_yds = "合格";
			}
			else
			{
				Result_detection_25_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_29_00_YDS == FALSE)
			{
				Result_detection_29_00_yds = "合格";
			}
			else
			{
				Result_detection_29_00_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_24_01_YDS == FALSE)
			{
				Result_detection_24_01_yds = "合格";
			}
			else
			{
				Result_detection_24_01_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_24_02_YDS == FALSE)
			{
				Result_detection_24_02_yds = "合格";
			}
			else
			{
				Result_detection_24_02_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_24_03_YDS == FALSE)
			{
				Result_detection_24_03_yds = "合格";
			}
			else
			{
				Result_detection_24_03_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_24_04_YDS == FALSE)
			{
				Result_detection_24_04_yds = "合格";
			}
			else
			{
				Result_detection_24_04_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_24_05_YDS == FALSE)
			{
				Result_detection_24_05_yds = "合格";
			}
			else
			{
				Result_detection_24_05_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_24_06_YDS == FALSE)
			{
				Result_detection_24_06_yds = "合格";
			}
			else
			{
				Result_detection_24_06_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_24_07_YDS == FALSE)
			{
				Result_detection_24_07_yds = "合格";
			}
			else
			{
				Result_detection_24_07_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_24_08_YDS == FALSE)
			{
				Result_detection_24_08_yds = "合格";
			}
			else
			{
				Result_detection_24_08_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_26_01_YDS == FALSE)
			{
				Result_detection_26_01_yds = "合格";
			}
			else
			{
				Result_detection_26_01_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_26_02_YDS == FALSE)
			{
				Result_detection_26_02_yds = "合格";
			}
			else
			{
				Result_detection_26_02_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_26_03_YDS == FALSE)
			{
				Result_detection_26_03_yds = "合格";
			}
			else
			{
				Result_detection_26_03_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_26_04_YDS == FALSE)
			{
				Result_detection_26_04_yds = "合格";
			}
			else
			{
				Result_detection_26_04_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_26_05_YDS == FALSE)
			{
				Result_detection_26_05_yds = "合格";
			}
			else
			{
				Result_detection_26_05_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_26_06_YDS == FALSE)
			{
				Result_detection_26_06_yds = "合格";
			}
			else
			{
				Result_detection_26_06_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_26_07_YDS == FALSE)
			{
				Result_detection_26_07_yds = "合格";
			}
			else
			{
				Result_detection_26_07_yds = "不合格";
			}
			if (HALCON_FUNC_ACTION.Result_detection_26_08_YDS == FALSE)
			{
				Result_detection_26_08_yds = "合格";
			}
			else
			{
				Result_detection_26_08_yds = "不合格";
			}
			Result_detection_24_01_yds = HALCON_FUNC_ACTION.strBuffer_hv_CURVA_DISTANCE_OF_PIN1;
			Result_detection_24_02_yds = HALCON_FUNC_ACTION.strBuffer_hv_CURVA_DISTANCE_OF_PIN2;
			Result_detection_24_03_yds = HALCON_FUNC_ACTION.strBuffer_hv_CURVA_DISTANCE_OF_PIN3;
			Result_detection_24_04_yds = HALCON_FUNC_ACTION.strBuffer_hv_CURVA_DISTANCE_OF_PIN4;
			Result_detection_24_05_yds = HALCON_FUNC_ACTION.strBuffer_hv_CURVA_DISTANCE_OF_PIN5;
			Result_detection_24_06_yds = HALCON_FUNC_ACTION.strBuffer_hv_CURVA_DISTANCE_OF_PIN6;
			Result_detection_24_07_yds = HALCON_FUNC_ACTION.strBuffer_hv_CURVA_DISTANCE_OF_PIN7;
			Result_detection_24_08_yds = HALCON_FUNC_ACTION.strBuffer_hv_CURVA_DISTANCE_OF_PIN8;
			Result_detection_26_01_yds = HALCON_FUNC_ACTION.strBuffer_hv_Distance11;
			Result_detection_26_02_yds = HALCON_FUNC_ACTION.strBuffer_hv_Distance12;
			Result_detection_26_03_yds = HALCON_FUNC_ACTION.strBuffer_hv_Distance13;
			Result_detection_26_04_yds = HALCON_FUNC_ACTION.strBuffer_hv_Distance14;
			Result_detection_26_05_yds = HALCON_FUNC_ACTION.strBuffer_hv_Distance15;
			Result_detection_26_06_yds = HALCON_FUNC_ACTION.strBuffer_hv_Distance16;
			Result_detection_26_07_yds = HALCON_FUNC_ACTION.strBuffer_hv_Distance17;
			Result_detection_26_08_yds = HALCON_FUNC_ACTION.strBuffer_hv_Distance18;
			Result_detection_25_00_yds = HALCON_FUNC_ACTION.strBuffer_hv_SPAN_OF_CHIP_1;
			Result_detection_29_00_yds = HALCON_FUNC_ACTION.strBuffer_hv_CURVA_DISTANCE_OF_INC_PIN1;
		}
		UpdateData(FALSE);

		//HALCON_FUNC_ACTION.ACTION_OCV_CORE();
		HALCON_FUNC_ACTION.OCR_CORE_PRE_PROCESSING();
	
		if (HALCON_FUNC_ACTION.hv_FLAG_ING_RECOGNIYION_YES_OR_NO_YDS == 0)
		{
			//排序
			HALCON_FUNC_ACTION.OCR_ORDER_SELECTED_REGION();
			//do
			HALCON_FUNC_ACTION.OCR_DO_OCR_CLASS_SVM();

			//Display the results
			{
				HALCON_FUNC_ACTION.DISPLAY_OCR_RESULT();
				Result_of_ocr_recognition = HALCON_FUNC_ACTION.Result_of_ocr_recognition;
				UpdateData(FALSE);
			}
		}
	}
	else
	{
		HALCON_FUNC_ACTION.disp_message(HALCON_FUNC_ACTION.hv_WindowHandle, "目标未被发现，正在矫正中...", "image", 450, 120,
			"black", "true");
	}
	//HALCON_FUNC_ACTION.CLEAR_OCV_MODELDATA();
	CDialogEx::OnTimer(nIDEvent);
}


void Cmfc_halcon_version_ydsDlg::OnBnClickedButton2()
{
    Hlong lWWindowID = (Hlong)m_hWnd;
    HALCON_FUNC_ACTION.INIT_CAMERA_WINDOW(lWWindowID);
    HALCON_FUNC_ACTION.INIT_OCR_CLASS_SVM();
	//HALCON_FUNC_ACTION.INIT_TRAIN_OCV_ACTION();
	//HALCON_FUNC_ACTION.ACTION_TRAIN_OCV_VARMODEL();
	///TESTING
	//HALCON_FUNC_ACTION.ACTION_OCV_CORE();
	//HALCON_FUNC_ACTION.CLEAR_OCV_MODELDATA();
}


void Cmfc_halcon_version_ydsDlg::OnBnClickedButton3()
{
	SetTimer(1,125,NULL);

	// HTuple→VC 数据类型转换
	//HTuple hTuple = 1234;
	//int i = hTuple[0].I();                  // i=1234
	//long l = hTuple[0].L();                 // l=1234
	//long lNumber = hTuple.Num();            // lNumber=1，数据个数
	//double d = hTuple[0].D();               // d=1234.0000
	//hTuple = "1234";
	//CString strBuffer = hTuple[0].S();      // strBuffer="1234" 
	// HTuple→VC 数据类型转换
}


void Cmfc_halcon_version_ydsDlg::OnBnClickedButton5()
{
	// TODO: 在此添加控件通知处理程序代码
	KillTimer(1);


}


void Cmfc_halcon_version_ydsDlg::OnCbnSelchangeCombo1()
{
	// TODO: 在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnBnClickedButton4()
{
	/*
	// TODO: 在此添加控件通知处理程序代码
	//*****************************************OCR字库的训练***********************************************************
	//**需要训练！！！
	//***训练之前的准备*****
	//***************基于SVM--训练分类器--************************
	ReadImage(&ho_Image, "C:/Users/Administrator/Desktop/HALCON工程/OCR_TRAIN_FILE/CHAR/train_demo_01.bmp");
	GetImagePointer1(ho_Image, &hv_Pointer, &hv_Type, &hv_Width, &hv_Height);
	//if (HDevWindowStack::IsOpen())
		//CloseWindow(HDevWindowStack::Pop());
	SetWindowAttr("background_color", "white");
	OpenWindow(0, 0, hv_Width, hv_Height, 0, "", "", &hv_WindowHandle);
	HDevWindowStack::Push(hv_WindowHandle);
	HALCON_FUNC_ACTION.set_display_font(hv_WindowHandle, 12, "mono", "true", "false");
	if (HDevWindowStack::IsOpen())
		SetDraw(HDevWindowStack::GetActive(), "margin");
	if (HDevWindowStack::IsOpen())
		SetLineWidth(HDevWindowStack::GetActive(), 2);
	if (HDevWindowStack::IsOpen())
		DispObj(ho_Image, HDevWindowStack::GetActive());
	// dev_update_window(...); only in hdevelop
	// dev_update_pc(...); only in hdevelop
	// dev_update_var(...); only in hdevelop

	//**Create an SVM classifier for the characters A to Z and 0 to 9 and '.'
	//**数字对用的：  编号 = 数字 + 52
	//**大写字母 ：   编号 = 字母 - 1
	//**小写字母 ：   编号 = 字母 + 25

	//*   T --> Classifier_svm_az09[19]
	//*   n --> Classifier_svm_az09[39]
	//*   0-52   1-53   2-54
	//Classifier_svm_Az09 := ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O',                          'P','Q','R','S','T','U','V','W','X','Y','Z',                          'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o',                          'p','q','r','s','t','u','v','w','x','y','z',                          '0','1','2','3','4','5','6','7','8','9','.']
	hv_Classifier_svm_Az09.Clear();
	hv_Classifier_svm_Az09[0] = "8";
	hv_Classifier_svm_Az09[1] = "5";
	hv_Classifier_svm_Az09[2] = "6";
	hv_Classifier_svm_Az09[3] = "3";
	hv_Classifier_svm_Az09[4] = "T";
	hv_Classifier_svm_Az09[5] = "6";
	hv_Classifier_svm_Az09[6] = "2";
	hv_Classifier_svm_Az09[7] = "8";
	hv_Classifier_svm_Az09[8] = "1";
	hv_Classifier_svm_Az09[9] = "n";
	hv_Classifier_svm_Az09[10] = "7";
	hv_Classifier_svm_Az09[11] = "0";
	hv_Classifier_svm_Az09[12] = "3";
	hv_Classifier_svm_Az09[13] = "4";
	//*xinpian_num1 的对应字母标识号：
	//********************8   5   6   3   T   6   2   8   1   n   7   0   3   4
	hv_Number_sop_8_num1.Clear();
	hv_Number_sop_8_num1[0] = 0;
	hv_Number_sop_8_num1[1] = 60;
	hv_Number_sop_8_num1[2] = 57;
	hv_Number_sop_8_num1[3] = 58;
	hv_Number_sop_8_num1[4] = 55;
	hv_Number_sop_8_num1[5] = 19;
	hv_Number_sop_8_num1[6] = 58;
	hv_Number_sop_8_num1[7] = 54;
	hv_Number_sop_8_num1[8] = 60;
	hv_Number_sop_8_num1[9] = 53;
	hv_Number_sop_8_num1[10] = 39;
	hv_Number_sop_8_num1[11] = 59;
	hv_Number_sop_8_num1[12] = 52;
	hv_Number_sop_8_num1[13] = 55;
	hv_Number_sop_8_num1[14] = 56;
	hv_Rank_sop_8_num1.Clear();
	hv_Rank_sop_8_num1[0] = 0;
	hv_Rank_sop_8_num1[1] = 0;
	hv_Rank_sop_8_num1[2] = 0;
	hv_Rank_sop_8_num1[3] = 0;
	hv_Rank_sop_8_num1[4] = 0;
	hv_Rank_sop_8_num1[5] = 0;
	hv_Rank_sop_8_num1[6] = 0;
	hv_Rank_sop_8_num1[7] = 0;
	hv_Rank_sop_8_num1[8] = 0;
	hv_Rank_sop_8_num1[9] = 0;
	hv_Rank_sop_8_num1[10] = 0;
	hv_Rank_sop_8_num1[11] = 0;
	hv_Rank_sop_8_num1[12] = 0;
	hv_Rank_sop_8_num1[13] = 0;
	hv_Rank_sop_8_num1[14] = 0;
	hv_Rank_sop_8_num1[15] = 0;
	hv_Rank_sop_8_num1[16] = 0;
	hv_Rank_sop_8_num1[17] = 0;
	hv_Rank_sop_8_num1[18] = 0;
	hv_ObjectSelected_all = 0;

	//Classifier_svm_az09 := ['8','5','6','3','T','6','2','8','1','n','7','0','3','4','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O',                          'P','Q','R','S','T','U','V','W','X','Y','Z',                          '0','1','2','3','4','5','6','7','8','9']

	//****声明一个训练文件(.trf)
	hv_TrainFile = "train_characters_ocr_sop_8_num1.trf";
	// dev_set_check ("~give_error")
	try
	{
		DeleteFile(hv_TrainFile);
	}
	catch (HalconCpp::HException e)
	{
		int error = e.ErrorCode();
		if (error < 0)
			throw e;
	}
	// dev_set_check ("give_error")


	//**FOR CHAR shibie

	//***创建了一个SVM的分类器*
	//Read the training images and store the regions
	//of the characters to a training file

	for (hv_Index_one_cc = 1; hv_Index_one_cc <= 20; hv_Index_one_cc += 1)
	{
		ReadImage(&ho_Image, "C:/Users/Administrator/Desktop/HALCON工程/OCR_TRAIN_FILE/CHAR/train_demo_" + (hv_Index_one_cc.TupleString(".2d")));
		if (HDevWindowStack::IsOpen())
			DispObj(ho_Image, HDevWindowStack::GetActive());
		GetImageSize(ho_Image, &hv_Width1, &hv_Height1);

		MeanImage(ho_Image, &ho_Image_temp_Mean, hv_Width1, hv_Height1);
		hv_Offset_dyn_threshod = 0;
		hv_Radius_closing_circle = 3.5;
		for (hv_Index_Offset_dyn_threshod = 0; hv_Index_Offset_dyn_threshod <= 100; hv_Index_Offset_dyn_threshod += 0.02)
		{
			hv_Offset_dyn_threshod += 0.02;
			DynThreshold(ho_Image, ho_Image_temp_Mean, &ho_Region_temp_DynThresh, hv_Offset_dyn_threshod,
				"light");
			ClosingCircle(ho_Region_temp_DynThresh, &ho_Region_temp_Closing, hv_Radius_closing_circle);
			Connection(ho_Region_temp_Closing, &ho_ConnectedRegions);
			SelectShape(ho_ConnectedRegions, &ho_SelectedRegions_char, (HTuple("height").Append("width")),
				"and", (HTuple(80).Append(40)), (HTuple(170).Append(150)));
			AreaCenter(ho_SelectedRegions_char, &hv_Area, &hv_RowCh, &hv_ColumnCh);
			if (0 != ((hv_RowCh.TupleLength()) == 14))
			{
				hv_Index_Offset_dyn_threshod = 100;
				hv_Radius_closing_circle = 8;
				for (hv_Index_Radius_closing_circle = 0; hv_Index_Radius_closing_circle <= 100; hv_Index_Radius_closing_circle += 0.01)
				{
					hv_Radius_closing_circle = hv_Radius_closing_circle - 0.01;
					DynThreshold(ho_Image, ho_Image_temp_Mean, &ho_Region_temp_DynThresh, hv_Offset_dyn_threshod,
						"light");
					ClosingCircle(ho_Region_temp_DynThresh, &ho_Region_temp_Closing, hv_Radius_closing_circle);
					Connection(ho_Region_temp_Closing, &ho_ConnectedRegions);
					SelectShape(ho_ConnectedRegions, &ho_SelectedRegions_char, (HTuple("height").Append("width")),
						"and", (HTuple(80).Append(40)), (HTuple(170).Append(150)));
					AreaCenter(ho_SelectedRegions_char, &hv_Area, &hv_RowCh, &hv_ColumnCh);
					if (0 != ((hv_RowCh.TupleLength()) == 14))
					{
						hv_Index_Radius_closing_circle = 100;
					}
				}
			}
		}
		//stop ()
		SortRegion(ho_SelectedRegions_char, &ho_CharsSorted, "character", "true", "column");
		ShapeTrans(ho_CharsSorted, &ho_Characters, "rectangle1");
		GenRectangle1(&ho_ROI_0, 57.5, 48.5, 185.5, 162.5);

		//***GET ALL number OF REGION
		{
			HTuple end_val84 = (hv_RowCh.TupleLength()) - 1;
			HTuple step_val84 = 1;

		}
		//stop ()
		//**Display the Image_temp
		if (HDevWindowStack::IsOpen())
			DispObj(ho_Image, HDevWindowStack::GetActive());
		DilationRectangle1(ho_Characters, &ho_RegionDilation, 7, 7);
		if (HDevWindowStack::IsOpen())
			DispObj(ho_RegionDilation, HDevWindowStack::GetActive());
		AreaCenter(ho_CharsSorted, &hv_Area1, &hv_Row, &hv_Column);

		CountObj(ho_SelectedRegions_char, &hv_NumberObjects);
		{
			HTuple end_val180 = hv_NumberObjects;
			HTuple step_val180 = 1;
			for (hv_Index_two_cc = 1; hv_Index_two_cc.Continue(end_val180, step_val180); hv_Index_two_cc += step_val180)
			{
				SelectObj(ho_SelectedRegions_char, &ho_ObjectSelected_temp, HTuple(hv_Rank_sop_8_num1[hv_Index_two_cc]));

				if (0 != (HTuple(hv_Index_one_cc == 0).TupleAnd(hv_Index_two_cc == 0)))
				{
					WriteOcrTrainf(ho_ObjectSelected_temp, ho_Image, HTuple(hv_Classifier_svm_Az09[0]),
						hv_TrainFile);
				}
				else
				{
					AppendOcrTrainf(ho_ObjectSelected_temp, ho_Image, HTuple(hv_Classifier_svm_Az09[hv_Index_two_cc - 1]),
						hv_TrainFile);
				}
				if (HDevWindowStack::IsOpen())
					SetColor(HDevWindowStack::GetActive(), "gray");
				if (HDevWindowStack::IsOpen())
					DispObj(ho_ObjectSelected_temp, HDevWindowStack::GetActive());
				HALCON_FUNC_ACTION.disp_message(hv_WindowHandle, HTuple(hv_Classifier_svm_Az09[hv_Index_two_cc - 1]),
					"window", 10, 10 + (hv_Index_two_cc * 20), "black", "true");
			}
		}
		HALCON_FUNC_ACTION.disp_continue_message(hv_WindowHandle, "black", "true");
		//stop ()
	}
	// stop(); only in hdevelop
	ReadOcrTrainf(&ho_Characters, hv_TrainFile, &hv_CharacterNames);
	CountObj(ho_Characters, &hv_NumberCharacters);
	{
		HTuple end_val198 = hv_NumberCharacters;
		HTuple step_val198 = 1;
		for (hv_index_one = 1; hv_index_one.Continue(end_val198, step_val198); hv_index_one += step_val198)
		{
			SelectObj(ho_Characters, &ho_CharacterSelected, hv_index_one);
			if (HDevWindowStack::IsOpen())
				ClearWindow(HDevWindowStack::GetActive());
			if (HDevWindowStack::IsOpen())
				DispObj(ho_CharacterSelected, HDevWindowStack::GetActive());
			HALCON_FUNC_ACTION.set_display_font(hv_WindowHandle, 50, "mono", "true", "false");
			HALCON_FUNC_ACTION.disp_message(hv_WindowHandle, HTuple(hv_CharacterNames[hv_index_one - 1]), "window",
				50, 50, "black", "true");
			//stop ()
		}
	}
	//stop ()

	//trainf_ocr_class_svm (OCRHandle, 'train_characters_ocr.trf', 0.001, 'default')
	//reduce_ocr_class_svm (OCRHandle, 'bottom_up', 2, 0.001, OCRHandleReduced)
	//write_ocr_class_svm (OCRHandleReduced, 'font_characters_ocr')
	//**如果 FileExists是1 则表示文件是存在的，如果是0表示文件不存在
	FileExists("train_characters_ocr.osc", &hv_FileExists);

	//**得到文字标识名
	ReadOcrTrainfNames(hv_TrainFile, &hv_CharacterNames, &hv_CharacterCount);
	//**创建一个OCR分类器
	CreateOcrClassSvm(8, 10, "constant", ((HTuple("convexity").Append("projection_horizontal")).Append("projection_vertical")),
		hv_CharacterNames, "rbf", 0.02, 0.05, "one-versus-one", "normalization", 10,
		&hv_OCRHandle);

	//**训练支持向量机
	TrainfOcrClassSvm(hv_OCRHandle, hv_TrainFile, 0.01, "default");
	ReduceOcrClassSvm(hv_OCRHandle, "bottom_up", 2, 0.001, &hv_OCRHandleReduced);

	//**保存训练结果到模型文件（OMC文件）
	hv_FontFile = "train_characters_ocr_sop_8_num1.omc";
	WriteOcrClassSvm(hv_OCRHandleReduced, hv_FontFile);
	//**关闭
	ClearOcrClassSvm(hv_OCRHandle);
	//if (HDevWindowStack::IsOpen())
		//CloseWindow(HDevWindowStack::Pop());
		*/
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit1()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit10()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit3()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit4()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit5()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit6()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit7()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit8()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit9()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit2()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit11()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit12()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit13()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit14()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit15()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit16()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit17()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit18()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnBnClickedButton6()
{
	// TODO: 在此添加控件通知处理程序代码
	
	char  acDesetDir[MAX_PATH];
	BROWSEINFO   bi;
	ITEMIDLIST   *pidl;

	bi.hwndOwner = this->m_hWnd;
	bi.pidlRoot = NULL;
	bi.pszDisplayName = (LPWSTR)acDesetDir;
	bi.lpszTitle = _T("Select a folder to save image");
	bi.ulFlags = BIF_RETURNONLYFSDIRS;
	bi.lpfn = NULL;
	bi.lParam = 0;
	bi.iImage = 0;

	pidl = SHBrowseForFolder(&bi);

	if (pidl == NULL)
		return;

	if (!SHGetPathFromIDList(pidl, ((LPWSTR)acDesetDir)))
	{
		return;
	}
	m_sSnapFilePath = (LPWSTR)acDesetDir;
	UpdateData(FALSE);
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit19()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnBnClickedButton7()
{
	/*
	hv_AcqHandle_of_camera = 0;

	//*WINDOW
	hv_Width_of_window = 0;
	hv_Height_of_window = 0;

	//**模板图片的路径
	hv_PATH_OF_PICTURE1 = "C:/Users/Administrator/Desktop/HALCON工程/TESTING1.bmp";
	hv_PATH_OF_PICTURE2 = "C:/Users/Administrator/Desktop/HALCON工程/TESTING2.bmp";
	hv_PATH_OF_PICTURE3 = "C:/Users/Administrator/Desktop/HALCON工程/TESTING3.bmp";
	hv_PATH_OF_PICTURE4 = "C:/Users/Administrator/Desktop/HALCON工程/OCR_TRAIN_FILE/CHAR_7134MOBAN/train_demo_21";
	// TODO: 在此添加控件通知处理程序代码
	OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "gray", -1, "false",
		"default", "[0]  Camera MV-U130M#3DF11190-3", 0, -1, &hv_AcqHandle_of_camera);
	GrabImageStart(hv_AcqHandle_of_camera, -1);

	ReadImage(&ho_IMAGE_OF_INIT, "C:/Users/Administrator/Desktop/HALCON工程/OCR_TRAIN_FILE/NCC_MODEL/ncc_model_demo_01.bmp");
	GetImageSize(ho_IMAGE_OF_INIT, &hv_Width_of_window, &hv_Height_of_window);
	//dev_close_window ()
	//**新打开窗口，为以后在VS2015环境下调试下方便！
	//*大小：640*512尺寸的窗口
	SetWindowAttr("background_color", "black");
	OpenWindow(0, 0, hv_Width_of_window / 2, hv_Height_of_window / 2, 0, "", "", &hv_WindowHandle);
	HDevWindowStack::Push(hv_WindowHandle);
	//dump_window (3600, 'jpeg', 'C:/Users/Administrator/Desktop/HALCON工程/Template')
	if (HDevWindowStack::IsOpen())
		DispObj(ho_IMAGE_OF_INIT, HDevWindowStack::GetActive());
	//**截图工具
	//grab_image_async (Image, AcqHandle_of_camera, -1)
	//dump_window (3600, 'bmp', 'C:/Users/Administrator/Desktop/HALCON工程/TESTING3')
	//stop ()
	//**OCR分类器获取*********************************
	hv_FontFile = "train_characters_ocr_sop_8_num1.omc";
	ReadOcrClassSvm(hv_FontFile, &hv_OCRHandle);


	GenRectangle1(&ho_ROI_0, 131.5, 285.5, 967.5, 953.5);

	AreaCenter(ho_ROI_0, &hv_Area, &hv_RowRef, &hv_ColumnRef);
	ReduceDomain(ho_IMAGE_OF_INIT, ho_ROI_0, &ho_ImageReduced);
	CreateNccModel(ho_ImageReduced, "auto", 0, 0, "auto", "use_polarity", &hv_ModelID);
	if (HDevWindowStack::IsOpen())
		SetDraw(HDevWindowStack::GetActive(), "margin");
	if (HDevWindowStack::IsOpen())
		DispObj(ho_ROI_0, HDevWindowStack::GetActive());
	//stop ()
	hv_Rows = HTuple();
	hv_Cols = HTuple();

	GrabImageAsync(&ho_Image_temp, hv_AcqHandle_of_camera, -1);
	//dump_window (3601, 'bmp', 'C:/Users/Administrator/Desktop/HALCON工程/TESTING')
	//**根据NCC-Model 找到最佳的匹配的区域
	FindNccModel(ho_Image_temp, hv_ModelID, 0, 0, 0.5, 1, 0.5, "true", 0, &hv_Row,
		&hv_Column, &hv_Angle, &hv_Score);

	//******如果目标不在视野中的情况**************************
	while (0 != (hv_Row == HTuple()))
	{
		GrabImageAsync(&ho_Image_temp, hv_AcqHandle_of_camera, -1);
		//dump_window (3601, 'bmp', 'C:/Users/Administrator/Desktop/HALCON工程/TESTING')
		//**根据NCC-Model 找到最佳的匹配的区域
		FindNccModel(ho_Image_temp, hv_ModelID, 0, 0, 0.5, 1, 0.5, "true", 0, &hv_Row,
			&hv_Column, &hv_Angle, &hv_Score);
		HALCON_FUNC_ACTION.set_display_font(hv_WindowHandle, 24, "mono", "true", "false");
		HALCON_FUNC_ACTION.disp_message(hv_WindowHandle, "目标物体在视野中不存在或者偏离！！", "image",
			450, 120, "black", "true");
		HALCON_FUNC_ACTION.disp_message(hv_WindowHandle, "提示：请将物体移动至视野中！！", "image", 516,
			120, "black", "true");
		HALCON_FUNC_ACTION.set_display_font(hv_WindowHandle, 16, "mono", "true", "false");
		HALCON_FUNC_ACTION.disp_message(hv_WindowHandle, "工作状态：目标偏离", "image", 0, 0, "green",
			"false");
	}
	//**点和角严格计算的仿射变换
	VectorAngleToRigid(hv_RowRef, hv_ColumnRef, 0, hv_Row, hv_Column, 0, &hv_HomMat2D);
	//disp_message (WindowHandle, ' testing: ', 'window', Row, 0, 'lime green', 'false')
	AffineTransRegion(ho_ROI_0, &ho_RegionAffineTrans, hv_HomMat2D, "nearest_neighbor");
	hv_Rows = hv_Rows.TupleConcat(hv_Row);
	hv_Cols = hv_Cols.TupleConcat(hv_Column);

	//****目标区域位置的选定*******************
	if (HDevWindowStack::IsOpen())
		SetDraw(HDevWindowStack::GetActive(), "margin");
	if (HDevWindowStack::IsOpen())
		SetColor(HDevWindowStack::GetActive(), "red");
	if (HDevWindowStack::IsOpen())
		DispObj(ho_RegionAffineTrans, HDevWindowStack::GetActive());
	//******************************字符和LOGO变量定义************************************************

	//**FOR CHAR shibie
	hv_point_yds_row_crop = hv_Row - 538;
	hv_point_yds_column_crop = hv_Column - 578;
	hv_point_yds_width_crop = 1576;
	hv_point_yds_height_crop =1428;
	//point_yds_row_crop := Row
	//point_yds_column_crop := Column
	//point_yds_width_crop := 428
	//point_yds_height_crop := 576
	//**FOR LOGO
	hv_point_yds_row_logo = hv_Row - 160;
	hv_point_yds_column_logo = hv_Column - 220;
	hv_point_yds_width_logo = 180;
	hv_point_yds_height_logo = 225;

	//********************************字体设置*************************************************************************

	if (HDevWindowStack::IsOpen())
		SetColor(HDevWindowStack::GetActive(), "green");
	if (HDevWindowStack::IsOpen())
		SetDraw(HDevWindowStack::GetActive(), "margin");
	if (HDevWindowStack::IsOpen())
		SetLineWidth(HDevWindowStack::GetActive(), 3);
	HALCON_FUNC_ACTION.set_display_font(hv_WindowHandle, 14, "mono", "true", "false");

	CropPart(ho_Image_temp, &ho_Image_temp_corp, hv_point_yds_row_crop, hv_point_yds_column_crop,
		hv_point_yds_width_crop, hv_point_yds_height_crop);

	//*************为ocr训练做准备，程序正常运行时，请将其注释掉！！！*********************
	//dev_display (Image_temp_corp)
	if (HDevWindowStack::IsOpen())
		DispObj(ho_Image_temp_corp, HDevWindowStack::GetActive());
	DumpWindow(3600, "bmp", hv_PATH_OF_PICTURE4);
	ho_Image_temp_corp.Clear();
//	if (HDevWindowStack::IsOpen())
	//	ClearWindow(HDevWindowStack::GetActive());
	if (HDevWindowStack::IsOpen())
		CloseWindow();
	// stop(); only in hdevelop
	*/
}


void Cmfc_halcon_version_ydsDlg::OnStnClickedStaticPreview()
{
	// TODO: 在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit57()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit61()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit58()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit59()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit60()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit56()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit20()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit21()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit22()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit23()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit24()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit25()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit26()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit27()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit28()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit29()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit30()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit31()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit32()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit33()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit34()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit37()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit39()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit40()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit41()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit42()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit44()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit45()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit46()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit47()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit48()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit49()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit50()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit51()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit52()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit53()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit54()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit55()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit36()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit35()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit38()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit43()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit62()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit63()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit64()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void Cmfc_halcon_version_ydsDlg::OnEnChangeEdit65()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}
